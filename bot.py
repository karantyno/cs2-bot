import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "7250987821:AAH6K0nJr5IT0aRNUMdwvvPjqTcDn5vrhk4"  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 326929052  # –¢–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

players = []

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üî• –í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å")],
        [KeyboardButton(text="üéÆ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")],
        [KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="‚öî –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")],
        [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(lambda message: message.text == "üî• –í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å")
async def join_ready(message: types.Message):
    await message.answer("–ö—Ä–∞—Å–∞–≤—á–∏–∫! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ - '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É'")

@dp.message(lambda message: message.text == "üéÆ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É")
async def join_tournament(message: types.Message):
    if len(players) < 12:
        if message.from_user.full_name not in players:
            players.append(message.from_user.full_name)
            await message.answer(f"‚úÖ {message.from_user.full_name} –∑–∞–ø–∏—Å–∞–Ω! ({len(players)}/12)")
            if len(players) == 12:
                await message.answer("üî• –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞!")
        else:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")
    else:
        await message.answer("‚ùå –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def list_players(message: types.Message):
    if players:
        await message.answer("üìú –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(players))
    else:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.")

@dp.message(lambda message: message.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")
async def leave_tournament(message: types.Message):
    if message.from_user.full_name in players:
        players.remove(message.from_user.full_name)
        await message.answer("–ó–∞—Å—Å–∞–ª? üòè –ñ–¥–µ–º —Ç–µ–±—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!")
    else:
        await message.answer("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

@dp.message(lambda message: message.text == "‚öî –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
async def teams_division(message: types.Message):
    await message.answer("‚öî –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

@dp.message(lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")
async def reset_players(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        global players
        players = []
        await message.answer("üîÑ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω!")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

async def countdown_timer():
    while True:
        now = datetime.now()
        game_time = datetime(now.year, now.month, now.day, 21, 0)
        if now > game_time:
            game_time += timedelta(days=1)
        time_left = (game_time - now).total_seconds()
        if time_left > 0:
            await asyncio.sleep(time_left - 1800)
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
            await asyncio.sleep(600)
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
            await asyncio.sleep(600)
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")

async def notify_players(message: str):
    for player in players:
        try:
            await bot.send_message(player, message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {player}: {e}")

async def main():
    asyncio.create_task(countdown_timer())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
