import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "7250987821:AAH6K0nJr5IT0aRNUMdwvvPjqTcDn5vrhk4"  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 326929052  # –¢–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
players = []

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üî• –í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å", callback_data="join")],
        [InlineKeyboardButton(text="üéÆ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É", callback_data="register")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="players")],
        [InlineKeyboardButton(text="‚öî –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥", callback_data="teams")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="leave")]
    ]
)
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å"
@dp.message(lambda message: message.text == "üî• –í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å")
async def join_ready(message: types.Message):
    await message.answer("–ö—Ä–∞—Å–∞–≤—á–∏–∫! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ - '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É'")

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É" –∏ –∫–æ–º–∞–Ω–¥–∞ /join
@dp.message(lambda message: message.text == "üéÆ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É" or message.text == "/join")
async def join_tournament(message: types.Message):
    if len(players) < 12:
        if message.from_user.full_name not in players:
            players.append(message.from_user.full_name)
            await message.answer(f"‚úÖ {message.from_user.full_name} –∑–∞–ø–∏—Å–∞–Ω! ({len(players)}/12)")
            
            # –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ª–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
            if len(players) == 12:
                await message.answer("üî• –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞!")
        else:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")
    else:
        await message.answer("‚ùå –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

# –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" –∏ –∫–æ–º–∞–Ω–¥–∞ /players
@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" or message.text == "/players")
async def list_players(message: types.Message):
    if players:
        await message.answer("üìú –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(players))
    else:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.")

# –ö–Ω–æ–ø–∫–∞ "üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"
@dp.message(lambda message: message.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")
async def leave_tournament(message: types.Message):
    if message.from_user.full_name in players:
        players.remove(message.from_user.full_name)
        await message.answer("–ó–∞—Å—Å–∞–ª? üòè –ñ–¥–µ–º —Ç–µ–±—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!")
    else:
        await message.answer("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

# –ö–Ω–æ–ø–∫–∞ "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥" (–∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∞ –±–µ–∑ –ª–æ–≥–∏–∫–∏)
@dp.message(lambda message: message.text == "‚öî –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
async def teams_division(message: types.Message):
    await message.answer("‚öî –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ /reset (—Å–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤)
@dp.message(Command("reset"))
async def reset_players(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        global players
        players = []
        await message.answer("üîÑ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω!")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
async def countdown_timer():
    while True:
        now = datetime.now()
        game_time = datetime(now.year, now.month, now.day, 21, 0)  # 21:00 –ú–°–ö

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ 21:00, –∑–Ω–∞—á–∏—Ç, —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞
        if now > game_time:
            game_time += timedelta(days=1)

        time_left = (game_time - now).total_seconds()

        # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 30, 20 –∏ 10 –º–∏–Ω—É—Ç –¥–æ –∏–≥—Ä—ã
        if time_left > 0:
            await asyncio.sleep(time_left - 1800)  # –ñ–¥–∞—Ç—å –¥–æ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
            await asyncio.sleep(600)  # –ñ–¥–∞—Ç—å –¥–æ 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
            await asyncio.sleep(600)  # –ñ–¥–∞—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")

# –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞–º
async def notify_players(message: str):
    for player in players:
        try:
            await bot.send_message(player, message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {player}: {e}")

async def main():
    asyncio.create_task(countdown_timer())  # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
