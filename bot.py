import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "7250987821:AAH6K0nJr5IT0aRNUMdwvvPjqTcDn5vrhk4"  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 326929052  # –¢–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ (ID –∏ –∏–º—è)
players = {}

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üî• –í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å", callback_data="join")],
        [InlineKeyboardButton(text="üéÆ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É", callback_data="register")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="players")],
        [InlineKeyboardButton(text="‚öî –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥", callback_data="teams")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="leave")]
    ]
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É"
@dp.callback_query(lambda c: c.data == "register")
async def register_player(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.full_name

    if len(players) < 12:
        if user_id not in players:
            players[user_id] = user_name
            await bot.send_message(callback_query.from_user.id, f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã ({len(players)}/12)")
            
            if len(players) == 12:
                await bot.send_message(callback_query.from_user.id, "üî• –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞!")
        else:
            await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùå –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

# –í—ã—Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data == "leave")
async def leave_tournament(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in players:
        del players[user_id]
        await bot.send_message(callback_query.from_user.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

# –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
@dp.callback_query(lambda c: c.data == "players")
async def show_players(callback_query: types.CallbackQuery):
    if players:
        players_list = "\n".join(players.values())
        await bot.send_message(callback_query.from_user.id, f"üìú –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n{players_list}")
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.")

# –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
async def countdown_timer():
    while True:
        now = datetime.now()
        game_time = datetime(now.year, now.month, now.day, 21, 0)  # 21:00 –ú–°–ö
        if now > game_time:
            game_time += timedelta(days=1)

        time_left = (game_time - now).total_seconds()

        if time_left > 0:
            await asyncio.sleep(time_left - 1800)  # 30 –º–∏–Ω—É—Ç
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
            await asyncio.sleep(600)  # 20 –º–∏–Ω—É—Ç
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            await notify_players("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")

# –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞–º
async def notify_players(message: str):
    for user_id in players.keys():
        try:
            await bot.send_message(user_id, message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

async def main():
    asyncio.create_task(countdown_timer())  # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
