import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"
ADMIN_ID = 326929052  # –¢–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
players = []

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üî• –í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å"), KeyboardButton(text="üéÆ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"), KeyboardButton(text="‚öî –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")],
        [KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å"
@dp.message(lambda message: message.text == "üî• –í—Å—Ç—É–ø–∏—Ç—å –∏ –Ω–µ —Å—Å–∞—Ç—å")
async def join_welcome(message: types.Message):
    await message.answer("–ö—Ä–∞—Å–∞–≤—á–∏–∫! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É")

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É" –∏ –∫–æ–º–∞–Ω–¥–∞ /join
@dp.message(lambda message: message.text == "üéÆ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É" or message.text == "/join")
async def join_tournament(message: types.Message):
    if len(players) < 12:
        if message.from_user.full_name not in players:
            players.append(message.from_user.full_name)
            await message.answer(f"‚úÖ {message.from_user.full_name} –∑–∞–ø–∏—Å–∞–Ω! ({len(players)}/12)")
            
            if len(players) == 12:
                await bot.send_message(chat_id=message.chat.id, text="üî• –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞!")
        else:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")
    else:
        await message.answer("‚ùå –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")

# –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" –∏ –∫–æ–º–∞–Ω–¥–∞ /players
@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" or message.text == "/players")
async def list_players(message: types.Message):
    if players:
        await message.answer("üìú –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(players))
    else:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.")

# –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"
@dp.message(lambda message: message.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")
async def leave_tournament(message: types.Message):
    if message.from_user.full_name in players:
        players.remove(message.from_user.full_name)
        await message.answer("üò¢ –ó–∞—Å—Å–∞–ª? –ñ–¥–µ–º —Ç–µ–±—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!")
    else:
        await message.answer("‚ùå –¢—ã –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ!")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ /reset (—Å–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞)
@dp.message(Command("reset"))
async def reset_players(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        global players
        players = []
        await message.answer("üîÑ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω!")
    else:
        await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

# –¢–∞–π–º–µ—Ä –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
async def countdown_timer():
    while True:
        now = datetime.datetime.now()
        game_time = datetime.datetime(now.year, now.month, now.day, 21, 0)  # 21:00 –ú–°–ö
        time_left = (game_time - now).total_seconds()
        
        if 0 < time_left <= 1800:  # –ï—Å–ª–∏ –¥–æ –∏–≥—Ä—ã –º–µ–Ω—å—à–µ 30 –º–∏–Ω—É—Ç
            for player in players:
                await bot.send_message(player, "‚è≥ –î–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å!")
                await asyncio.sleep(600)  # –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    asyncio.create_task(countdown_timer())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
